# Generated by Django 5.2.1 on 2025-05-12 09:09
# pylint: disable=missing-module-docstring,missing-class-docstring,unused-argument

import csv
import os

from django.contrib.auth.hashers import make_password
from django.db import migrations
from django.utils import timezone


def load_space_objects_from_csv(apps, schema_editor):
    """Loads space objects from csv file."""
    User = apps.get_model("astrocat", "User")
    SpaceSystem = apps.get_model("astrocat", "SpaceSystem")
    SpaceObject = apps.get_model("astrocat", "SpaceObject")

    user = User.objects.create(
        username="admin",
        email="admin@example.com",
        is_superuser=True,
        is_staff=True,
        is_active=True,
        password=make_password("admin123"),
    )

    # Создаем Солнечную систему
    solar_system = SpaceSystem.objects.create(
        name="Солнечная система",
        galaxy="Млечный путь",
        about="Наша родная система",
        creator=user,
        created_at=timezone.now(),
    )

    base_dir = os.path.dirname(os.path.dirname(os.path.dirname(__file__)))
    csv_path = os.path.join(base_dir, "astrocat", "fixtures", "solar_objects.csv")

    with open(csv_path, encoding="utf-8") as csvfile:
        reader = csv.DictReader(csvfile)
        for row in reader:

            def parse(value, to_type=float):
                try:
                    return to_type(value)
                except Exception:  # pylint: disable=broad-except
                    return None

            SpaceObject.objects.create(
                name=row["name"],
                space_type=row["space_type"],
                radius=parse(row["radius"]),
                period=parse(row["period"]),
                ex=parse(row["ex"]),
                v=parse(row["v"]),
                p=parse(row["p"]),
                g=parse(row["g"]),
                m=parse(row["m"]),
                sputnik=parse(row["sputnik"], int),
                atmosphere=row["atmosphere"] or None,
                about=row["about"] or None,
                system=solar_system,
                creator=user,
                created_at=timezone.now(),
            )


def unload_space_objects(apps, schema_editor):
    """Removes all created space objects from csv file."""
    User = apps.get_model("astrocat", "User")
    SpaceSystem = apps.get_model("astrocat", "SpaceSystem")
    system = SpaceSystem.objects.filter(name="Солнечная система").first()
    if system:
        system.delete()

    user = User.objects.filter(username="admin").first()
    user.delete()


class Migration(migrations.Migration):

    dependencies = [
        (
            "astrocat",
            "0004_remove_spaceobject_image_path_alter_spaceobject_ex_and_more",
        ),
    ]

    operations = [
        migrations.RunPython(load_space_objects_from_csv, reverse_code=unload_space_objects),
    ]
